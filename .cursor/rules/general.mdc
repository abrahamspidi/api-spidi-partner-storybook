---
alwaysApply: false
---
# Global MDX Documentation Rules
- Storybook project about an api documentation
- This documentations language is primarly spanish but with logic and variable names in english
- Code snippets in tables should be wrapped like this: <b><i/></b>
- Tables must be written in basic HTML without styles
- All urls should start with {{baseUrl}} without initial / but wrapped in quotes
- URLs wrapped with ` even inside tables
- Code snippets wrapped with ```
- Do not use <code> tag
- Always add some kind of wrapper backticks to braces since they break MDX
- Only use request example tables for endpoints different than GET
- Require column should use ✅Si and ❌No

# Modes description
When building a page, only use one of the two modes. Do not merge
- First mode (Design): Standard API design doc page layers (1-8)
- Second Mode(MAPPING): Standard MAPPING API page structure


# First mode (Design): Standard API design doc page layers (1-8)

All official documentation must follow this fixed pattern for each endpoint:

1. **Description** – functional purpose and context
2. **Endpoint** – HTTP method, route, headers, authentication
3. **Request Example** – JSON or HTTP block
4. **Request Table** – header/path parameters or query/body parameters: field / type / required / description. Each object generates a subtable
4.x. **Nested Tables** - For each object generated subtable the title the position on the sub-list, should be like "4.1 Subtabla:...", "4.2 Subtabla:...", "4.3 Subtabla:..." and so on
5. **Response 200 Example**
6. **Response 200 Table** – field / type / required / description. Each object generates a subtable
7. **Examples of Response ≠ 200** (errors, warnings)
8. **Error Table** – structure, HTTP codes, error fields. Each object generates a subtable
---

# Example Structure

# 1. Descripción
# 2. Endpoint
Method: **POST**
```
{{baseUrl}}/...
```
# 3. Ejemplo del Request
Method: **POST**
```json
{...}
```
# 4. Tabla de Parámetros del Request
<table>...</table>
# 4.1 Propiedad Objeto n0
<table>...</table>
# 5. Ejemplo de Response 200
```json
{
  "success": true,
  "data": {...}
}
```
# 6. Tabla de Response 200
Cases: ...
### Campos del Nivel Principal
<table>...</table>
### 6.x Subtabla: ...
<table>...</table>
# 7. Ejemplos de Response ≠ 200
### Error 400 - Bad Request
```json
{
  "success": false,
  "error": {...}
}
```
# 8. Tabla de Errores
<table>...</table>
### 8.x Subtabla: ...
<table>...</table>


# Second Mode(MAPPING): Standard MAPPING API page structure 
(MAPPING ONLY rules)
(Always include JSON body payload for POST, PUT, PATCH, DELETE)
(Follow the file 0.ExampleMap.mdx if necessary)

# 1. Endpoints relacionados
<table>...</table>

# 2. Request de Plataforma SPIDI
Method: **POST**
```
{{baseUrl}}/...
```
# 3. Tabla explicación de cada campo del Request Plataforma SPIDI 
<table>...</table>

# 4. Request de SOFITASA
Method: **GET**
```
{{baseUrl}}/...
```
# 5. MAPEO 1 - Tabla explicación de cada campo del Request SOFITASA
<table>...</table>

# 6. Ejemplos de Response 200 de SOFITASA
```json
{
  "success": true,
  "data": {...}
}
```
# 7. Tabla Explicativa de cada campo del response 200 de SOFITASA
# 7.1. Campos de nivel raíz(Response 200) 
<table>...</table>
# 7.2 Subtabla: Response 200 → result
<table>...</table>

# 8. Ejemplos de Response 200 de Plataforma SPIDI
```json
{
  "success": true,
  "data": {...}
}
```
# 9. MAPEO 2 - Tablas explicación de cada campo del Response 200 de Plataforma SPIDI
# 9.1 Campos de nivel raíz (Response 200)
<table>...</table>
# 9.2 Subtabla: Response 200 → [accounts]
<table>...</table>
